{# <li><a href="{% url 'bistrooapp_admin:menuu_create' category='Supp' %}">Add Sub Line</a> - Supp</li> #}
{# loob urli http://127.0.0.1:8000/bistrooapp_admin/add_subline/Supp/ #}
{# see vastab urlile path('add_subline/<str:category>/', views.add_subline, name='menuu_create'), #}
{# käivitab view funkts return render(request, 'bistrooapp_admin/menuu_create.html', {'category': category}) #}
{# liigub vormile <input type="hidden" name="category_name" value="{{ category }}"> #}
{# vorm saadab andmed: <form method="POST" action="{% url 'bistrooapp_admin:save_subline' %}"> #}
{# sobiv url on: path('save_subline/', views.save_subline, name='save_subline') #}
{# liigub view funkts: def save_subline(request): if request.method == 'POST':  #}
{# funkts suunab listi lehele: return redirect('bistrooapp_admin:menuu_list') #}

kategooriate kaupa blokkidesse jagatud vaadet saab teha kolmel moel
google otsing:  django html break for loop
1. if' ga katkesta sisemine for loop ja liigu edasi välimise categooria loobiga vt all https://dev.to/anuragrana/for-loops-in-django-2jdi
2.  tee template tag vt kood all https://djangosnippets.org/snippets/2093/
https://pythoncircle.com/post/42/creating-custom-template-tags-in-django/
3. tee view's phyton koodiga list milles on dict {} ja  kasuta regroup

-----------------------------------------------------------------------
1.
Break in Django for loop:
That might be a piece of bad news for you. There is no break statement in Django template For loop.

Depending on your requirement you can do one of the following.

Option 1 - Iterate over the whole list but do not perform any action if the condition is not matched.

For example, you are printing numbers from a list and you need to exit the list as soon as number 99 is encountered. Normally this would be done as below in Python.
for number in numbers:
    if 99 == number:
        break
    print(number)
But there is no break statement in Django template For loop. You can achieve the same functionality (almost) as below.
{% set isBreak = False %}
{% for number in numbers %}
    {% if 99 == number %}
        {% set isBreak = true %}
    {% endif %}

    {% if isBreak %}
        {# this is a comment. Do nothing. #}
    {% else %}
        <div>{{number}}</div>
    {% endif %}
{% endfor %}

---------------------------------------------------------------------
2.
rom django import template

register = template.Library()


@register.filter('break')
def break_(loop):
    '''Breaks from a loop.

    The 'break' filter is used within a loop and takes as input a loop variable,
    e.g. 'forloop' in case of a for loop. For example, to display the items
    from list ``items`` up to the first item that is equal to ``end``::

        <ul>
        {% for item in items %}
            {% if item == 'end' %}
                {{ forloop|break }}
            {% endif %}
            <li>{{ item }}</li>
        {% endfor %}
        </ul>

    Breaking from nested loops is also supported by passing the appropriate loop
    variable, e.g. ``forloop.parentloop|break``.
    '''
    raise StopLoopException(loop, False)


@register.filter('continue')
def continue_(loop):
    '''Continues a loop by jumping to its beginning.

    The 'continue' filter is used within a loop and takes as input a loop
    variable, e.g. 'forloop' in case of a for loop. It can also be used (and is
    mostly useful) for nested loops by passing the appropriate loop variable,
    e.g. ``forloop.parentloop|continue``. For example::

        {% for key,values in mapping.iteritems %}<br/>
            {% for value in values %}
                {{ key }}: {{ value }}<br/>
                {% if value|divisibleby:3  %}
                    {{ value }} is divisible by 3<br/>
                    {{ forloop.parentloop|continue }}
                {% endif %}
            {% endfor %}
            {{ key }}: No value divisible by 3<br/>
        {% endfor %}
    '''
    raise StopLoopException(loop, True)

 -------------------------------------------------------------------------
 3.

 regroup¶
Regroups a list of alike objects by a common attribute.

This complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing "name", "population", and "country" keys:

cities = [
    {"name": "Mumbai", "population": "19,000,000", "country": "India"},
    {"name": "Calcutta", "population": "15,000,000", "country": "India"},
    {"name": "New York", "population": "20,000,000", "country": "USA"},
    {"name": "Chicago", "population": "7,000,000", "country": "USA"},
    {"name": "Tokyo", "population": "33,000,000", "country": "Japan"},
]
…and you’d like to display a hierarchical list that is ordered by country, like this:

India
Mumbai: 19,000,000
Calcutta: 15,000,000
USA
New York: 20,000,000
Chicago: 7,000,000
Japan
Tokyo: 33,000,000
You can use the {% regroup %} tag to group the list of cities by country. The following snippet of template code would accomplish this:

{% regroup cities by country as country_list %}

<ul>
{% for country in country_list %}
    <li>{{ country.grouper }}
    <ul>
        {% for city in country.list %}
          <li>{{ city.name }}: {{ city.population }}</li>
        {% endfor %}
    </ul>
    </li>
{% endfor %}
</ul>
Let’s walk through this example. {% regroup %} takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we’re regrouping the cities list by the country attribute and calling the result country_list.

{% regroup %} produces a list (in this case, country_list) of group objects. Group objects are instances of namedtuple() with two fields:

grouper – the item that was grouped by (e.g., the string “India” or “Japan”).
list – a list of all items in this group (e.g., a list of all cities with country=’India’).
Because {% regroup %} produces namedtuple() objects, you can also write the previous example as:

{% regroup cities by country as country_list %}

<ul>
{% for country, local_cities in country_list %}
    <li>{{ country }}
    <ul>
        {% for city in local_cities %}
          <li>{{ city.name }}: {{ city.population }}</li>
        {% endfor %}
    </ul>
    </li>
{% endfor %}
</ul>
Note that {% regroup %} does not order its input! Our example relies on the fact that the cities list was ordered by country in the first place. If the cities list did not order its members by country, the regrouping would naively display more than one group for a single country. For example, say the cities list was set to this (note that the countries are not grouped together):

cities = [
    {"name": "Mumbai", "population": "19,000,000", "country": "India"},
    {"name": "New York", "population": "20,000,000", "country": "USA"},
    {"name": "Calcutta", "population": "15,000,000", "country": "India"},
    {"name": "Chicago", "population": "7,000,000", "country": "USA"},
    {"name": "Tokyo", "population": "33,000,000", "country": "Japan"},
]
With this input for cities, the example {% regroup %} template code above would result in the following output:

India
Mumbai: 19,000,000
USA
New York: 20,000,000
India
Calcutta: 15,000,000
USA
Chicago: 7,000,000
Japan
Tokyo: 33,000,000
The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.

Another solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries:

{% regroup cities|dictsort:"country" by country as country_list %}
Grouping on other properties¶
Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the “country” field is a foreign key to a class with an attribute “description,” you could use:

{% regroup cities by country.description as country_list %}
Or, if country is a field with choices, it will have a get_FOO_display() method available as an attribute, allowing you to group on the display string rather than the choices key:

{% regroup cities by get_country_display as country_list %}
{{ country.grouper }} will now display the value fields from the choices set rather than the keys.
